/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.emg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.emg.model.Draw;
import net.sareweb.emg.model.DrawModel;
import net.sareweb.emg.model.DrawSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Draw service. Represents a row in the &quot;EuroMillionGame_Draw&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.emg.model.DrawModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DrawImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see DrawImpl
 * @see net.sareweb.emg.model.Draw
 * @see net.sareweb.emg.model.DrawModel
 * @generated
 */
@JSON(strict = true)
public class DrawModelImpl extends BaseModelImpl<Draw> implements DrawModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a draw model instance should use the {@link net.sareweb.emg.model.Draw} interface instead.
	 */
	public static final String TABLE_NAME = "EuroMillionGame_Draw";
	public static final Object[][] TABLE_COLUMNS = {
			{ "drawId", Types.BIGINT },
			{ "number1", Types.INTEGER },
			{ "number2", Types.INTEGER },
			{ "number3", Types.INTEGER },
			{ "number4", Types.INTEGER },
			{ "number5", Types.INTEGER },
			{ "star1", Types.INTEGER },
			{ "star2", Types.INTEGER },
			{ "number1Guess", Types.INTEGER },
			{ "number2Guess", Types.INTEGER },
			{ "number3Guess", Types.INTEGER },
			{ "number4Guess", Types.INTEGER },
			{ "number5Guess", Types.INTEGER },
			{ "star1Guess", Types.INTEGER },
			{ "star2Guess", Types.INTEGER },
			{ "drawDate", Types.TIMESTAMP },
			{ "modifyDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EuroMillionGame_Draw (drawId LONG not null primary key,number1 INTEGER,number2 INTEGER,number3 INTEGER,number4 INTEGER,number5 INTEGER,star1 INTEGER,star2 INTEGER,number1Guess INTEGER,number2Guess INTEGER,number3Guess INTEGER,number4Guess INTEGER,number5Guess INTEGER,star1Guess INTEGER,star2Guess INTEGER,drawDate DATE null,modifyDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EuroMillionGame_Draw";
	public static final String ORDER_BY_JPQL = " ORDER BY draw.drawDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EuroMillionGame_Draw.drawDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.emg.model.Draw"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.emg.model.Draw"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Draw toModel(DrawSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Draw model = new DrawImpl();

		model.setDrawId(soapModel.getDrawId());
		model.setNumber1(soapModel.getNumber1());
		model.setNumber2(soapModel.getNumber2());
		model.setNumber3(soapModel.getNumber3());
		model.setNumber4(soapModel.getNumber4());
		model.setNumber5(soapModel.getNumber5());
		model.setStar1(soapModel.getStar1());
		model.setStar2(soapModel.getStar2());
		model.setNumber1Guess(soapModel.getNumber1Guess());
		model.setNumber2Guess(soapModel.getNumber2Guess());
		model.setNumber3Guess(soapModel.getNumber3Guess());
		model.setNumber4Guess(soapModel.getNumber4Guess());
		model.setNumber5Guess(soapModel.getNumber5Guess());
		model.setStar1Guess(soapModel.getStar1Guess());
		model.setStar2Guess(soapModel.getStar2Guess());
		model.setDrawDate(soapModel.getDrawDate());
		model.setModifyDate(soapModel.getModifyDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Draw> toModels(DrawSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Draw> models = new ArrayList<Draw>(soapModels.length);

		for (DrawSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.emg.model.Draw"));

	public DrawModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _drawId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDrawId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _drawId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Draw.class;
	}

	@Override
	public String getModelClassName() {
		return Draw.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("drawId", getDrawId());
		attributes.put("number1", getNumber1());
		attributes.put("number2", getNumber2());
		attributes.put("number3", getNumber3());
		attributes.put("number4", getNumber4());
		attributes.put("number5", getNumber5());
		attributes.put("star1", getStar1());
		attributes.put("star2", getStar2());
		attributes.put("number1Guess", getNumber1Guess());
		attributes.put("number2Guess", getNumber2Guess());
		attributes.put("number3Guess", getNumber3Guess());
		attributes.put("number4Guess", getNumber4Guess());
		attributes.put("number5Guess", getNumber5Guess());
		attributes.put("star1Guess", getStar1Guess());
		attributes.put("star2Guess", getStar2Guess());
		attributes.put("drawDate", getDrawDate());
		attributes.put("modifyDate", getModifyDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long drawId = (Long)attributes.get("drawId");

		if (drawId != null) {
			setDrawId(drawId);
		}

		Integer number1 = (Integer)attributes.get("number1");

		if (number1 != null) {
			setNumber1(number1);
		}

		Integer number2 = (Integer)attributes.get("number2");

		if (number2 != null) {
			setNumber2(number2);
		}

		Integer number3 = (Integer)attributes.get("number3");

		if (number3 != null) {
			setNumber3(number3);
		}

		Integer number4 = (Integer)attributes.get("number4");

		if (number4 != null) {
			setNumber4(number4);
		}

		Integer number5 = (Integer)attributes.get("number5");

		if (number5 != null) {
			setNumber5(number5);
		}

		Integer star1 = (Integer)attributes.get("star1");

		if (star1 != null) {
			setStar1(star1);
		}

		Integer star2 = (Integer)attributes.get("star2");

		if (star2 != null) {
			setStar2(star2);
		}

		Integer number1Guess = (Integer)attributes.get("number1Guess");

		if (number1Guess != null) {
			setNumber1Guess(number1Guess);
		}

		Integer number2Guess = (Integer)attributes.get("number2Guess");

		if (number2Guess != null) {
			setNumber2Guess(number2Guess);
		}

		Integer number3Guess = (Integer)attributes.get("number3Guess");

		if (number3Guess != null) {
			setNumber3Guess(number3Guess);
		}

		Integer number4Guess = (Integer)attributes.get("number4Guess");

		if (number4Guess != null) {
			setNumber4Guess(number4Guess);
		}

		Integer number5Guess = (Integer)attributes.get("number5Guess");

		if (number5Guess != null) {
			setNumber5Guess(number5Guess);
		}

		Integer star1Guess = (Integer)attributes.get("star1Guess");

		if (star1Guess != null) {
			setStar1Guess(star1Guess);
		}

		Integer star2Guess = (Integer)attributes.get("star2Guess");

		if (star2Guess != null) {
			setStar2Guess(star2Guess);
		}

		Date drawDate = (Date)attributes.get("drawDate");

		if (drawDate != null) {
			setDrawDate(drawDate);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}
	}

	@JSON
	@Override
	public long getDrawId() {
		return _drawId;
	}

	@Override
	public void setDrawId(long drawId) {
		_drawId = drawId;
	}

	@JSON
	@Override
	public int getNumber1() {
		return _number1;
	}

	@Override
	public void setNumber1(int number1) {
		_number1 = number1;
	}

	@JSON
	@Override
	public int getNumber2() {
		return _number2;
	}

	@Override
	public void setNumber2(int number2) {
		_number2 = number2;
	}

	@JSON
	@Override
	public int getNumber3() {
		return _number3;
	}

	@Override
	public void setNumber3(int number3) {
		_number3 = number3;
	}

	@JSON
	@Override
	public int getNumber4() {
		return _number4;
	}

	@Override
	public void setNumber4(int number4) {
		_number4 = number4;
	}

	@JSON
	@Override
	public int getNumber5() {
		return _number5;
	}

	@Override
	public void setNumber5(int number5) {
		_number5 = number5;
	}

	@JSON
	@Override
	public int getStar1() {
		return _star1;
	}

	@Override
	public void setStar1(int star1) {
		_star1 = star1;
	}

	@JSON
	@Override
	public int getStar2() {
		return _star2;
	}

	@Override
	public void setStar2(int star2) {
		_star2 = star2;
	}

	@JSON
	@Override
	public int getNumber1Guess() {
		return _number1Guess;
	}

	@Override
	public void setNumber1Guess(int number1Guess) {
		_number1Guess = number1Guess;
	}

	@JSON
	@Override
	public int getNumber2Guess() {
		return _number2Guess;
	}

	@Override
	public void setNumber2Guess(int number2Guess) {
		_number2Guess = number2Guess;
	}

	@JSON
	@Override
	public int getNumber3Guess() {
		return _number3Guess;
	}

	@Override
	public void setNumber3Guess(int number3Guess) {
		_number3Guess = number3Guess;
	}

	@JSON
	@Override
	public int getNumber4Guess() {
		return _number4Guess;
	}

	@Override
	public void setNumber4Guess(int number4Guess) {
		_number4Guess = number4Guess;
	}

	@JSON
	@Override
	public int getNumber5Guess() {
		return _number5Guess;
	}

	@Override
	public void setNumber5Guess(int number5Guess) {
		_number5Guess = number5Guess;
	}

	@JSON
	@Override
	public int getStar1Guess() {
		return _star1Guess;
	}

	@Override
	public void setStar1Guess(int star1Guess) {
		_star1Guess = star1Guess;
	}

	@JSON
	@Override
	public int getStar2Guess() {
		return _star2Guess;
	}

	@Override
	public void setStar2Guess(int star2Guess) {
		_star2Guess = star2Guess;
	}

	@JSON
	@Override
	public Date getDrawDate() {
		return _drawDate;
	}

	@Override
	public void setDrawDate(Date drawDate) {
		_drawDate = drawDate;
	}

	@JSON
	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_modifyDate = modifyDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Draw.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Draw toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Draw)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DrawImpl drawImpl = new DrawImpl();

		drawImpl.setDrawId(getDrawId());
		drawImpl.setNumber1(getNumber1());
		drawImpl.setNumber2(getNumber2());
		drawImpl.setNumber3(getNumber3());
		drawImpl.setNumber4(getNumber4());
		drawImpl.setNumber5(getNumber5());
		drawImpl.setStar1(getStar1());
		drawImpl.setStar2(getStar2());
		drawImpl.setNumber1Guess(getNumber1Guess());
		drawImpl.setNumber2Guess(getNumber2Guess());
		drawImpl.setNumber3Guess(getNumber3Guess());
		drawImpl.setNumber4Guess(getNumber4Guess());
		drawImpl.setNumber5Guess(getNumber5Guess());
		drawImpl.setStar1Guess(getStar1Guess());
		drawImpl.setStar2Guess(getStar2Guess());
		drawImpl.setDrawDate(getDrawDate());
		drawImpl.setModifyDate(getModifyDate());

		drawImpl.resetOriginalValues();

		return drawImpl;
	}

	@Override
	public int compareTo(Draw draw) {
		int value = 0;

		value = DateUtil.compareTo(getDrawDate(), draw.getDrawDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Draw)) {
			return false;
		}

		Draw draw = (Draw)obj;

		long primaryKey = draw.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Draw> toCacheModel() {
		DrawCacheModel drawCacheModel = new DrawCacheModel();

		drawCacheModel.drawId = getDrawId();

		drawCacheModel.number1 = getNumber1();

		drawCacheModel.number2 = getNumber2();

		drawCacheModel.number3 = getNumber3();

		drawCacheModel.number4 = getNumber4();

		drawCacheModel.number5 = getNumber5();

		drawCacheModel.star1 = getStar1();

		drawCacheModel.star2 = getStar2();

		drawCacheModel.number1Guess = getNumber1Guess();

		drawCacheModel.number2Guess = getNumber2Guess();

		drawCacheModel.number3Guess = getNumber3Guess();

		drawCacheModel.number4Guess = getNumber4Guess();

		drawCacheModel.number5Guess = getNumber5Guess();

		drawCacheModel.star1Guess = getStar1Guess();

		drawCacheModel.star2Guess = getStar2Guess();

		Date drawDate = getDrawDate();

		if (drawDate != null) {
			drawCacheModel.drawDate = drawDate.getTime();
		}
		else {
			drawCacheModel.drawDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			drawCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			drawCacheModel.modifyDate = Long.MIN_VALUE;
		}

		return drawCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{drawId=");
		sb.append(getDrawId());
		sb.append(", number1=");
		sb.append(getNumber1());
		sb.append(", number2=");
		sb.append(getNumber2());
		sb.append(", number3=");
		sb.append(getNumber3());
		sb.append(", number4=");
		sb.append(getNumber4());
		sb.append(", number5=");
		sb.append(getNumber5());
		sb.append(", star1=");
		sb.append(getStar1());
		sb.append(", star2=");
		sb.append(getStar2());
		sb.append(", number1Guess=");
		sb.append(getNumber1Guess());
		sb.append(", number2Guess=");
		sb.append(getNumber2Guess());
		sb.append(", number3Guess=");
		sb.append(getNumber3Guess());
		sb.append(", number4Guess=");
		sb.append(getNumber4Guess());
		sb.append(", number5Guess=");
		sb.append(getNumber5Guess());
		sb.append(", star1Guess=");
		sb.append(getStar1Guess());
		sb.append(", star2Guess=");
		sb.append(getStar2Guess());
		sb.append(", drawDate=");
		sb.append(getDrawDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.emg.model.Draw");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>drawId</column-name><column-value><![CDATA[");
		sb.append(getDrawId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number1</column-name><column-value><![CDATA[");
		sb.append(getNumber1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number2</column-name><column-value><![CDATA[");
		sb.append(getNumber2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number3</column-name><column-value><![CDATA[");
		sb.append(getNumber3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number4</column-name><column-value><![CDATA[");
		sb.append(getNumber4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number5</column-name><column-value><![CDATA[");
		sb.append(getNumber5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>star1</column-name><column-value><![CDATA[");
		sb.append(getStar1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>star2</column-name><column-value><![CDATA[");
		sb.append(getStar2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number1Guess</column-name><column-value><![CDATA[");
		sb.append(getNumber1Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number2Guess</column-name><column-value><![CDATA[");
		sb.append(getNumber2Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number3Guess</column-name><column-value><![CDATA[");
		sb.append(getNumber3Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number4Guess</column-name><column-value><![CDATA[");
		sb.append(getNumber4Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number5Guess</column-name><column-value><![CDATA[");
		sb.append(getNumber5Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>star1Guess</column-name><column-value><![CDATA[");
		sb.append(getStar1Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>star2Guess</column-name><column-value><![CDATA[");
		sb.append(getStar2Guess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>drawDate</column-name><column-value><![CDATA[");
		sb.append(getDrawDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Draw.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Draw.class };
	private long _drawId;
	private int _number1;
	private int _number2;
	private int _number3;
	private int _number4;
	private int _number5;
	private int _star1;
	private int _star2;
	private int _number1Guess;
	private int _number2Guess;
	private int _number3Guess;
	private int _number4Guess;
	private int _number5Guess;
	private int _star1Guess;
	private int _star2Guess;
	private Date _drawDate;
	private Date _modifyDate;
	private Draw _escapedModel;
}