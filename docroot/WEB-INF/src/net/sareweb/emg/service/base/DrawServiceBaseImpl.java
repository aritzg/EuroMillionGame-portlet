/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.emg.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import net.sareweb.emg.model.Draw;
import net.sareweb.emg.service.DrawService;
import net.sareweb.emg.service.persistence.DrawPersistence;
import net.sareweb.emg.service.persistence.GoogleDevicePersistence;
import net.sareweb.emg.service.persistence.ProposalPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the draw remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link net.sareweb.emg.service.impl.DrawServiceImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see net.sareweb.emg.service.impl.DrawServiceImpl
 * @see net.sareweb.emg.service.DrawServiceUtil
 * @generated
 */
public abstract class DrawServiceBaseImpl extends BaseServiceImpl
	implements DrawService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link net.sareweb.emg.service.DrawServiceUtil} to access the draw remote service.
	 */

	/**
	 * Returns the draw local service.
	 *
	 * @return the draw local service
	 */
	public net.sareweb.emg.service.DrawLocalService getDrawLocalService() {
		return drawLocalService;
	}

	/**
	 * Sets the draw local service.
	 *
	 * @param drawLocalService the draw local service
	 */
	public void setDrawLocalService(
		net.sareweb.emg.service.DrawLocalService drawLocalService) {
		this.drawLocalService = drawLocalService;
	}

	/**
	 * Returns the draw remote service.
	 *
	 * @return the draw remote service
	 */
	public net.sareweb.emg.service.DrawService getDrawService() {
		return drawService;
	}

	/**
	 * Sets the draw remote service.
	 *
	 * @param drawService the draw remote service
	 */
	public void setDrawService(net.sareweb.emg.service.DrawService drawService) {
		this.drawService = drawService;
	}

	/**
	 * Returns the draw persistence.
	 *
	 * @return the draw persistence
	 */
	public DrawPersistence getDrawPersistence() {
		return drawPersistence;
	}

	/**
	 * Sets the draw persistence.
	 *
	 * @param drawPersistence the draw persistence
	 */
	public void setDrawPersistence(DrawPersistence drawPersistence) {
		this.drawPersistence = drawPersistence;
	}

	/**
	 * Returns the google device local service.
	 *
	 * @return the google device local service
	 */
	public net.sareweb.emg.service.GoogleDeviceLocalService getGoogleDeviceLocalService() {
		return googleDeviceLocalService;
	}

	/**
	 * Sets the google device local service.
	 *
	 * @param googleDeviceLocalService the google device local service
	 */
	public void setGoogleDeviceLocalService(
		net.sareweb.emg.service.GoogleDeviceLocalService googleDeviceLocalService) {
		this.googleDeviceLocalService = googleDeviceLocalService;
	}

	/**
	 * Returns the google device remote service.
	 *
	 * @return the google device remote service
	 */
	public net.sareweb.emg.service.GoogleDeviceService getGoogleDeviceService() {
		return googleDeviceService;
	}

	/**
	 * Sets the google device remote service.
	 *
	 * @param googleDeviceService the google device remote service
	 */
	public void setGoogleDeviceService(
		net.sareweb.emg.service.GoogleDeviceService googleDeviceService) {
		this.googleDeviceService = googleDeviceService;
	}

	/**
	 * Returns the google device persistence.
	 *
	 * @return the google device persistence
	 */
	public GoogleDevicePersistence getGoogleDevicePersistence() {
		return googleDevicePersistence;
	}

	/**
	 * Sets the google device persistence.
	 *
	 * @param googleDevicePersistence the google device persistence
	 */
	public void setGoogleDevicePersistence(
		GoogleDevicePersistence googleDevicePersistence) {
		this.googleDevicePersistence = googleDevicePersistence;
	}

	/**
	 * Returns the proposal local service.
	 *
	 * @return the proposal local service
	 */
	public net.sareweb.emg.service.ProposalLocalService getProposalLocalService() {
		return proposalLocalService;
	}

	/**
	 * Sets the proposal local service.
	 *
	 * @param proposalLocalService the proposal local service
	 */
	public void setProposalLocalService(
		net.sareweb.emg.service.ProposalLocalService proposalLocalService) {
		this.proposalLocalService = proposalLocalService;
	}

	/**
	 * Returns the proposal remote service.
	 *
	 * @return the proposal remote service
	 */
	public net.sareweb.emg.service.ProposalService getProposalService() {
		return proposalService;
	}

	/**
	 * Sets the proposal remote service.
	 *
	 * @param proposalService the proposal remote service
	 */
	public void setProposalService(
		net.sareweb.emg.service.ProposalService proposalService) {
		this.proposalService = proposalService;
	}

	/**
	 * Returns the proposal persistence.
	 *
	 * @return the proposal persistence
	 */
	public ProposalPersistence getProposalPersistence() {
		return proposalPersistence;
	}

	/**
	 * Sets the proposal persistence.
	 *
	 * @param proposalPersistence the proposal persistence
	 */
	public void setProposalPersistence(ProposalPersistence proposalPersistence) {
		this.proposalPersistence = proposalPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Draw.class;
	}

	protected String getModelClassName() {
		return Draw.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = drawPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = net.sareweb.emg.service.DrawLocalService.class)
	protected net.sareweb.emg.service.DrawLocalService drawLocalService;
	@BeanReference(type = net.sareweb.emg.service.DrawService.class)
	protected net.sareweb.emg.service.DrawService drawService;
	@BeanReference(type = DrawPersistence.class)
	protected DrawPersistence drawPersistence;
	@BeanReference(type = net.sareweb.emg.service.GoogleDeviceLocalService.class)
	protected net.sareweb.emg.service.GoogleDeviceLocalService googleDeviceLocalService;
	@BeanReference(type = net.sareweb.emg.service.GoogleDeviceService.class)
	protected net.sareweb.emg.service.GoogleDeviceService googleDeviceService;
	@BeanReference(type = GoogleDevicePersistence.class)
	protected GoogleDevicePersistence googleDevicePersistence;
	@BeanReference(type = net.sareweb.emg.service.ProposalLocalService.class)
	protected net.sareweb.emg.service.ProposalLocalService proposalLocalService;
	@BeanReference(type = net.sareweb.emg.service.ProposalService.class)
	protected net.sareweb.emg.service.ProposalService proposalService;
	@BeanReference(type = ProposalPersistence.class)
	protected ProposalPersistence proposalPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DrawServiceClpInvoker _clpInvoker = new DrawServiceClpInvoker();
}