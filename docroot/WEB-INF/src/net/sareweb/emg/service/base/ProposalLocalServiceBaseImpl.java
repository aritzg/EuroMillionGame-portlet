/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.emg.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import net.sareweb.emg.model.Proposal;
import net.sareweb.emg.service.ProposalLocalService;
import net.sareweb.emg.service.persistence.DrawPersistence;
import net.sareweb.emg.service.persistence.GoogleDevicePersistence;
import net.sareweb.emg.service.persistence.ProposalPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the proposal local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link net.sareweb.emg.service.impl.ProposalLocalServiceImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see net.sareweb.emg.service.impl.ProposalLocalServiceImpl
 * @see net.sareweb.emg.service.ProposalLocalServiceUtil
 * @generated
 */
public abstract class ProposalLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ProposalLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link net.sareweb.emg.service.ProposalLocalServiceUtil} to access the proposal local service.
	 */

	/**
	 * Adds the proposal to the database. Also notifies the appropriate model listeners.
	 *
	 * @param proposal the proposal
	 * @return the proposal that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Proposal addProposal(Proposal proposal) throws SystemException {
		proposal.setNew(true);

		return proposalPersistence.update(proposal);
	}

	/**
	 * Creates a new proposal with the primary key. Does not add the proposal to the database.
	 *
	 * @param proposalId the primary key for the new proposal
	 * @return the new proposal
	 */
	@Override
	public Proposal createProposal(long proposalId) {
		return proposalPersistence.create(proposalId);
	}

	/**
	 * Deletes the proposal with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param proposalId the primary key of the proposal
	 * @return the proposal that was removed
	 * @throws PortalException if a proposal with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Proposal deleteProposal(long proposalId)
		throws PortalException, SystemException {
		return proposalPersistence.remove(proposalId);
	}

	/**
	 * Deletes the proposal from the database. Also notifies the appropriate model listeners.
	 *
	 * @param proposal the proposal
	 * @return the proposal that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Proposal deleteProposal(Proposal proposal) throws SystemException {
		return proposalPersistence.remove(proposal);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Proposal.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return proposalPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.sareweb.emg.model.impl.ProposalModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return proposalPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.sareweb.emg.model.impl.ProposalModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return proposalPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return proposalPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return proposalPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Proposal fetchProposal(long proposalId) throws SystemException {
		return proposalPersistence.fetchByPrimaryKey(proposalId);
	}

	/**
	 * Returns the proposal with the primary key.
	 *
	 * @param proposalId the primary key of the proposal
	 * @return the proposal
	 * @throws PortalException if a proposal with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Proposal getProposal(long proposalId)
		throws PortalException, SystemException {
		return proposalPersistence.findByPrimaryKey(proposalId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return proposalPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the proposals.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.sareweb.emg.model.impl.ProposalModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of proposals
	 * @param end the upper bound of the range of proposals (not inclusive)
	 * @return the range of proposals
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Proposal> getProposals(int start, int end)
		throws SystemException {
		return proposalPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of proposals.
	 *
	 * @return the number of proposals
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getProposalsCount() throws SystemException {
		return proposalPersistence.countAll();
	}

	/**
	 * Updates the proposal in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param proposal the proposal
	 * @return the proposal that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Proposal updateProposal(Proposal proposal) throws SystemException {
		return proposalPersistence.update(proposal);
	}

	/**
	 * Returns the draw local service.
	 *
	 * @return the draw local service
	 */
	public net.sareweb.emg.service.DrawLocalService getDrawLocalService() {
		return drawLocalService;
	}

	/**
	 * Sets the draw local service.
	 *
	 * @param drawLocalService the draw local service
	 */
	public void setDrawLocalService(
		net.sareweb.emg.service.DrawLocalService drawLocalService) {
		this.drawLocalService = drawLocalService;
	}

	/**
	 * Returns the draw remote service.
	 *
	 * @return the draw remote service
	 */
	public net.sareweb.emg.service.DrawService getDrawService() {
		return drawService;
	}

	/**
	 * Sets the draw remote service.
	 *
	 * @param drawService the draw remote service
	 */
	public void setDrawService(net.sareweb.emg.service.DrawService drawService) {
		this.drawService = drawService;
	}

	/**
	 * Returns the draw persistence.
	 *
	 * @return the draw persistence
	 */
	public DrawPersistence getDrawPersistence() {
		return drawPersistence;
	}

	/**
	 * Sets the draw persistence.
	 *
	 * @param drawPersistence the draw persistence
	 */
	public void setDrawPersistence(DrawPersistence drawPersistence) {
		this.drawPersistence = drawPersistence;
	}

	/**
	 * Returns the google device local service.
	 *
	 * @return the google device local service
	 */
	public net.sareweb.emg.service.GoogleDeviceLocalService getGoogleDeviceLocalService() {
		return googleDeviceLocalService;
	}

	/**
	 * Sets the google device local service.
	 *
	 * @param googleDeviceLocalService the google device local service
	 */
	public void setGoogleDeviceLocalService(
		net.sareweb.emg.service.GoogleDeviceLocalService googleDeviceLocalService) {
		this.googleDeviceLocalService = googleDeviceLocalService;
	}

	/**
	 * Returns the google device remote service.
	 *
	 * @return the google device remote service
	 */
	public net.sareweb.emg.service.GoogleDeviceService getGoogleDeviceService() {
		return googleDeviceService;
	}

	/**
	 * Sets the google device remote service.
	 *
	 * @param googleDeviceService the google device remote service
	 */
	public void setGoogleDeviceService(
		net.sareweb.emg.service.GoogleDeviceService googleDeviceService) {
		this.googleDeviceService = googleDeviceService;
	}

	/**
	 * Returns the google device persistence.
	 *
	 * @return the google device persistence
	 */
	public GoogleDevicePersistence getGoogleDevicePersistence() {
		return googleDevicePersistence;
	}

	/**
	 * Sets the google device persistence.
	 *
	 * @param googleDevicePersistence the google device persistence
	 */
	public void setGoogleDevicePersistence(
		GoogleDevicePersistence googleDevicePersistence) {
		this.googleDevicePersistence = googleDevicePersistence;
	}

	/**
	 * Returns the proposal local service.
	 *
	 * @return the proposal local service
	 */
	public net.sareweb.emg.service.ProposalLocalService getProposalLocalService() {
		return proposalLocalService;
	}

	/**
	 * Sets the proposal local service.
	 *
	 * @param proposalLocalService the proposal local service
	 */
	public void setProposalLocalService(
		net.sareweb.emg.service.ProposalLocalService proposalLocalService) {
		this.proposalLocalService = proposalLocalService;
	}

	/**
	 * Returns the proposal remote service.
	 *
	 * @return the proposal remote service
	 */
	public net.sareweb.emg.service.ProposalService getProposalService() {
		return proposalService;
	}

	/**
	 * Sets the proposal remote service.
	 *
	 * @param proposalService the proposal remote service
	 */
	public void setProposalService(
		net.sareweb.emg.service.ProposalService proposalService) {
		this.proposalService = proposalService;
	}

	/**
	 * Returns the proposal persistence.
	 *
	 * @return the proposal persistence
	 */
	public ProposalPersistence getProposalPersistence() {
		return proposalPersistence;
	}

	/**
	 * Sets the proposal persistence.
	 *
	 * @param proposalPersistence the proposal persistence
	 */
	public void setProposalPersistence(ProposalPersistence proposalPersistence) {
		this.proposalPersistence = proposalPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("net.sareweb.emg.model.Proposal",
			proposalLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"net.sareweb.emg.model.Proposal");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Proposal.class;
	}

	protected String getModelClassName() {
		return Proposal.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = proposalPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = net.sareweb.emg.service.DrawLocalService.class)
	protected net.sareweb.emg.service.DrawLocalService drawLocalService;
	@BeanReference(type = net.sareweb.emg.service.DrawService.class)
	protected net.sareweb.emg.service.DrawService drawService;
	@BeanReference(type = DrawPersistence.class)
	protected DrawPersistence drawPersistence;
	@BeanReference(type = net.sareweb.emg.service.GoogleDeviceLocalService.class)
	protected net.sareweb.emg.service.GoogleDeviceLocalService googleDeviceLocalService;
	@BeanReference(type = net.sareweb.emg.service.GoogleDeviceService.class)
	protected net.sareweb.emg.service.GoogleDeviceService googleDeviceService;
	@BeanReference(type = GoogleDevicePersistence.class)
	protected GoogleDevicePersistence googleDevicePersistence;
	@BeanReference(type = net.sareweb.emg.service.ProposalLocalService.class)
	protected net.sareweb.emg.service.ProposalLocalService proposalLocalService;
	@BeanReference(type = net.sareweb.emg.service.ProposalService.class)
	protected net.sareweb.emg.service.ProposalService proposalService;
	@BeanReference(type = ProposalPersistence.class)
	protected ProposalPersistence proposalPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ProposalLocalServiceClpInvoker _clpInvoker = new ProposalLocalServiceClpInvoker();
}